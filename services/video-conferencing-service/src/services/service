import {bind, BindingScope, Provider} from '@loopback/core';

import {inject} from '@loopback/context';
import {repository} from '@loopback/repository';
import {
  param,
  patch,
  post,
  requestBody,
  HttpErrors,
  get,
  getModelSchemaRef,
} from '@loopback/rest';
import {authorize} from 'loopback4-authorization';
import {
  MeetingOptions,
  SessionOptions,
  VideoChatInterface,
  SessionResponse,
} from '../types';
import {VideoChatBindings} from '../keys';
import {authenticate, STRATEGY} from 'loopback4-authentication';
import {PermissionKeys} from '../enums/permission-keys.enum';
import {
  STATUS_CODE,
  CONTENT_TYPE,
  OPERATION_SECURITY_SPEC,
} from '@sourceloop/core';
import moment from 'moment';
import cryptoRandomString, {async} from 'crypto-random-string';
import {VideoChatSession, SessionAttendees} from '../models';
import {
  AuditLogsRepository,
  VideoChatSessionRepository,
  SessionAttendeesRepository,
} from '../repositories';
import {VonageBindings} from '../providers/vonage/keys';
import {VonageConfig, VonageSessionWebhookPayload} from '../providers/vonage';
import {VonageEnums} from '../enums';

@bind({scope: BindingScope.TRANSIENT})
export class MainProvider
  implements Provider<VideoChatInterface>
{
  constructor( @repository(VideoChatSessionRepository)
    private readonly videoChatSessionRepository: VideoChatSessionRepository,
    @inject(VideoChatBindings.VideoChatProvider)
    private readonly videoChatProvider: VideoChatInterface,
    @repository(AuditLogsRepository)
    private readonly auditLogRepository: AuditLogsRepository,
    @repository(SessionAttendeesRepository)
    private readonly sessionAttendeesRepository: SessionAttendeesRepository,
    @inject(VonageBindings.config, {optional: true})
    private readonly config: VonageConfig,) { }
  value() {

    return {
      getMeetingLink: async (  meetingOptions: MeetingOptions,): Promise<string> => {

        let scheduledTime: Date = new Date();
    const auditLogPayload = {
      action: 'session',
      actionType: 'meeting-link',
      actedAt: moment().format(),
      before: meetingOptions,
      after: {},
    };
    let errorMessage: string;

    if (meetingOptions.isScheduled) {
      if (!meetingOptions.scheduleTime) {
        errorMessage = 'Schedule time is not set.';
        auditLogPayload.after = {errorMessage};
        await this.auditLogRepository.create(auditLogPayload);
        throw new HttpErrors.BadRequest(errorMessage);
      } else if (isNaN(meetingOptions.scheduleTime.valueOf())) {
        errorMessage = 'Scheduled time is not in correct format.';
        auditLogPayload.after = {errorMessage};
        await this.auditLogRepository.create(auditLogPayload);
        throw new HttpErrors.BadRequest(errorMessage);
      } else if (moment().isAfter(meetingOptions.scheduleTime)) {
        errorMessage = `Meeting can't be scheduled with schedule time in past!`;
        auditLogPayload.after = {errorMessage};
        await this.auditLogRepository.create(auditLogPayload);
        throw new HttpErrors.BadRequest(errorMessage);
      } else {
        scheduledTime = meetingOptions.scheduleTime;
      }
    }

    const meetingResp = await this.videoChatProvider.getMeetingLink(
      meetingOptions,
    );

    const meetingLinkId = cryptoRandomString({length: 10, type: 'url-safe'});
    const videoSessionDetail = new VideoChatSession({
      sessionId: meetingResp.sessionId,
      meetingLink: meetingLinkId,
      isScheduled: meetingOptions.isScheduled,
      scheduleTime: new Date(scheduledTime),
      isArchived: meetingResp.isArchived,
    });

    await this.videoChatSessionRepository.save(videoSessionDetail);
    auditLogPayload.after = videoSessionDetail;
    await this.auditLogRepository.create(auditLogPayload);
    return meetingLinkId;
      }
    }
  }



}
